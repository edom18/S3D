//@ sourceMappingURL=main.map
// Generated by CoffeeScript 1.6.1

(function(win, doc, exports) {
  var FAR, MOUSE_DOWN, MOUSE_MOVE, MOUSE_UP, PI, cHeight, cWidth, camera, cos, ctx, cv, dragging, draw, init, isTouch, particles, prevX, prevY, random, renderer, requestAnimFrame, rotX, rotY, rotZ, scene, sin, sqrt, tan;
  sqrt = Math.sqrt, sin = Math.sin, cos = Math.cos, tan = Math.tan, PI = Math.PI, random = Math.random;
  isTouch = 'ontouchstart' in window;
  MOUSE_DOWN = isTouch ? 'touchstart' : 'mousedown';
  MOUSE_MOVE = isTouch ? 'touchmove' : 'mousemove';
  MOUSE_UP = isTouch ? 'touchend' : 'mouseup';
  requestAnimFrame = (function() {
    return win.requestAnimationFrame || win.mozRequestAnimationFrame || win.msRequestAnimationFrame || function(callback, element) {
      return win.setTimeout(callback, 16);
    };
  })();
  camera = null;
  scene = null;
  renderer = null;
  particles = [];
  cv = doc.querySelector('#canvas');
  ctx = cv.getContext('2d');
  cWidth = cv.width = win.innerWidth;
  cHeight = cv.height = win.innerHeight;
  FAR = 2000;
  rotX = 0;
  rotY = 0;
  rotZ = 0;
  dragging = false;
  prevX = 0;
  prevY = 0;
  init = function() {
    var b, base, g, hf, hh, hw, i, particle, r, size, sp, startZoom, v, x, y, z, _i;
    camera = new Camera(90, cWidth / cHeight, 1, FAR);
    camera.position.z = 1000;
    scene = new Scene;
    renderer = new Renderer(cv);
    hw = cWidth / 2;
    hh = cHeight / 2;
    hf = FAR / 2;
    base = 100;
    startZoom = 0;
    v = new Vector3(0, 0, 0);
    particle = new Particle(v, 0, 10000, 200, 200, 0);
    particles[0] = particle;
    scene.add(particle);
    for (i = _i = 1; _i < 300; i = ++_i) {
      x = ~~(random() * cWidth) - hw;
      y = ~~(random() * cHeight) - hh;
      z = ~~(random() * FAR) - hf;
      r = ~~(random() * 255);
      g = ~~(random() * 255);
      b = ~~(random() * 255);
      v = new Vector3(x, y, z);
      size = (~~(random() * FAR)) + 5;
      sp = random() * 2 + 0.1;
      particle = new Particle(v, sp, size, r, g, b);
      particles[i] = particle;
      scene.add(particle);
    }
    ctx.fillStyle = '#000';
    ctx.fillRect(0, 0, cWidth, cHeight);
    return draw();
  };
  draw = function() {
    var p, _i, _len;
    for (_i = 0, _len = particles.length; _i < _len; _i++) {
      p = particles[_i];
      p.update();
    }
    renderer.render(scene, camera);
    return requestAnimFrame(draw);
  };
  win.addEventListener('mousewheel', function(e) {
    camera.position.z -= ~~(e.wheelDelta / 10);
    renderer.render(scene, camera);
    return e.preventDefault();
  }, false);
  document.addEventListener('gesturechange', function(e) {
    var num;
    num = e.scale * base - base;
    return camera.position.z = startZoom - num;
  }, false);
  document.addEventListener('gesturestart', function() {
    var startZoom;
    return startZoom = camera.position.z;
  }, false);
  doc.addEventListener('touchstart', function(e) {
    return e.preventDefault();
  }, false);
  doc.addEventListener(MOUSE_DOWN, function(e) {
    dragging = true;
    prevX = isTouch ? e.touches[0].pageX : e.pageX;
    return prevY = isTouch ? e.touches[0].pageY : e.pageY;
  }, false);
  doc.addEventListener(MOUSE_MOVE, function(e) {
    var pageX, pageY;
    if (dragging === false) {
      return;
    }
    debugger;
    pageX = isTouch ? e.touches[0].pageX : e.pageX;
    pageY = isTouch ? e.touches[0].pageY : e.pageY;
    rotY += (prevX - pageX) / 100;
    rotX += (prevY - pageY) / 100;
    camera.setWorld(Matrix4.mul((new Matrix4()).rotY(rotY), (new Matrix4()).rotX(rotX)));
    prevX = pageX;
    prevY = pageY;
    return renderer.render(scene, camera);
  }, false);
  doc.addEventListener(MOUSE_UP, function(e) {
    return dragging = false;
  }, false);
  return doc.addEventListener('DOMContentLoaded', init, false);
})(window, window.document, window);
